{"version":3,"sources":["common/consts.ts","components/SignInUp.tsx","actions/types.ts","common/utils.ts","middleware/api.ts","actions/index.ts","components/SignUp.tsx","components/SignIn.tsx","components/MenuSection/DrawerC.tsx","components/MenuSection/index.tsx","components/WeatherForecast.tsx","components/Weather.tsx","components/Options.tsx","components/Notification.tsx","components/App/App.tsx","serviceWorker.ts","reducers/options.ts","reducers/index.ts","reducers/authentication.ts","reducers/services.ts","reducers/weather.ts","store/index.ts","index.tsx"],"names":["systems","notificationTypes","themes","services","useSelector","state","firstName","authentication","history","useHistory","content","Box","display","justifyContent","mt","Button","variant","color","onClick","push","alignSelf","mx","textAlign","fontSize","serviceAvailable","gettingWeather","actionTypes","initialWeather","city","now","temp","feels","humidity","pressure","description","icon","forecast","initialNotification","type","error","msg","initialState","email","options","system","metric","theme","light","notification","weather","parseRawWeatherData","data","list","length","Error","dataList","nowData","shift","dayTailChunks","Math","floor","Date","getHours","days5Data","splice","i","splitRawData","name","calcMaxTemp","dayData","map","chunk","main","temp_max","reduce","max","calcMinTemp","temp_min","calcForecastIcon","accum","current","currentIcon","Number","slice","replace","tempMax","tempMin","prepareForecast","feels_like","prepareData","fetchParsedWeather","a","fetch","res","json","postNewUser","userData","method","headers","body","JSON","stringify","status","response","postSignInInfo","getSignOut","deleteAccountAPI","types","setServiceAvailable","availability","gotWeather","showNotification","setSignedIn","user","signIn","signOut","dispatch","localStorage","clear","useStyles","makeStyles","paper","marginTop","spacing","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","form","width","submit","formData","lastName","password","initialFormErrors","firstNameErr","emailErr","passwordErr","SignUp","useState","formErrors","setFormErrors","formOk","setFormOk","spinnerShow","setSpinnerShow","classes","useDispatch","handleChange","prop","event","target","value","useEffect","code","message","IconButton","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","noValidate","onSubmit","preventDefault","result","fErrs","match","Object","values","includes","areFieldsOk","Grid","container","item","xs","sm","TextField","autoComplete","required","fullWidth","id","label","autoFocus","onChange","CircularProgress","justify","to","SignIn","Boolean","props","isOpen","toggleOpen","userName","handleDrawer","key","handleSignOut","Drawer","anchor","open","onKeyDown","List","ListItem","ListItemText","primary","Divider","button","ListItemIcon","root","flexGrow","menuButton","marginRight","grow","isOpenMenu","setMenu","AppBar","position","Toolbar","Hidden","smUp","edge","aria-label","smDown","Tooltip","title","DrawerC","createStyles","grid","img","weatherForecast","day","round","alignWeatherForecast","today","date","setDate","getDate","toLocaleString","weekday","Paper","elevation","src","alt","pop","padding","weatherState","alignWeatherNow","my","direction","WeatherForecast","auth","systemChecked","systemLabel","themeSwitch","themeLabel","px","FormControl","FormGroup","FormControlLabel","control","Switch","checked","changeSystem","changePressure","changeHumidity","changeTheme","startIcon","handleAlertClose","dropNotification","Snackbar","autoHideDuration","onClose","severity","backdrop","zIndex","drawer","App","themeState","createMuiTheme","background","serviceUnavailableOpen","gettingWeatherOpen","setItem","ThemeProvider","MenuSection","path","Options","Weather","SignInUp","Backdrop","Notification","window","location","hostname","rootReducer","combineReducers","action","imperial","dark","middlewares","thunk","getItem","storedState","parse","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.fb9ae88d.chunk.js","sourcesContent":["export enum systems {\r\n    metric = 'metric',\r\n    imperial = 'imperial'\r\n}\r\n\r\nexport enum notificationTypes {\r\n    //undefined = 'undefined',\r\n    error = 'error',\r\n}\r\n\r\nexport enum themes {\r\n    light = 'light',\r\n    dark = 'dark'\r\n}\r\n\r\nconst initialWeatherNow = {\r\n    temp: null,\r\n    feels: null,\r\n    humidity: null,\r\n    pressure: null,\r\n    description: null,\r\n    icon: null\r\n}\r\n\r\nexport const initialWeather = {\r\n    city: null,\r\n    now: initialWeatherNow,\r\n    forecast: null\r\n}\r\n\r\nexport const initialNotification = {\r\n    type: notificationTypes.error,\r\n    msg: '',\r\n}\r\n\r\nexport const initialState = {\r\n    authentication: {\r\n        email: null,\r\n        firstName: null\r\n    },\r\n    options: {\r\n        system: systems.metric,\r\n        pressure: true,\r\n        humidity: true,\r\n        theme: themes.light\r\n    },\r\n    services: {\r\n        serviceAvailable: true,\r\n        gettingWeather: false,\r\n        notification: initialNotification\r\n    },\r\n    weather: initialWeather\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Box } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\nimport { rootStateT } from '../store/types'\r\n\r\nexport default () => {\r\n    const services = useSelector((state: rootStateT) => state.services);\r\n    const firstName = useSelector((state: rootStateT) => state.authentication.firstName);\r\n    \r\n    const history = useHistory();\r\n\r\n    const handleSignIn = () => history.push('/signin');\r\n    const handleSignUp = () => history.push('/signup');\r\n\r\n    const content = (\r\n        <>\r\n            <Box display=\"flex\" justifyContent=\"center\" mt={7}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSignIn}>Sign In</Button>\r\n                <Box alignSelf=\"end\" mx={1}>\r\n                    or\r\n                </Box>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSignUp}> Sign Up</Button>\r\n            </Box>\r\n            <Box textAlign=\"center\" fontSize=\"h6.fontSize\" mt={2}>\r\n                for 5 days personal weather forecast\r\n            </Box>\r\n        </>\r\n    );\r\n    \r\n    if (firstName || !services.serviceAvailable || services.gettingWeather) return null;\r\n\r\n    return content;\r\n}","import { weatherT, notificationT } from '../common/types'\r\nimport { userT } from '../store/types'\r\n\r\nexport enum actionTypes {\r\n    changeSystem = 'change system',\r\n    changePressure = 'change pressure',\r\n    changeHumidity = 'change humidity',\r\n    setServiceAvailable = 'set service availability',\r\n    changeTheme = 'change the app theme',\r\n    deleteAccount = 'delete the user account of the app',\r\n    gettingWeather = 'getting weather data',\r\n    gotWeather = 'got weather data',\r\n    signIn = 'change auth state to signed in',\r\n    signOut = 'change auth state to signed out',\r\n    showNotification = 'show notification',\r\n    dropNotification = 'drop notification',\r\n}\r\n\r\nexport type actionsT = {\r\n    type: actionTypes,\r\n    weather?: weatherT,\r\n    user: userT,\r\n    notification: notificationT,\r\n    serviceAvailable: boolean,\r\n}","import { systems } from './consts'\r\nimport { weatherRawChunk, weatherRawT, weatherProps, weatherT } from './types'\r\n\r\nfunction round10(value: number) {\r\n    return Math.round(value * 10) / 10\r\n}\r\n\r\n/** Unit system convertion (including kPa -> mmHg) and rounding */\r\nexport function alignWeatherNow(weather: Partial<weatherProps>, system: systems): Partial<weatherProps> {\r\n    const { temp, feels, pressure } = weather;\r\n\r\n    return {\r\n        ...weather,\r\n        temp: round10( (system === systems.metric ? temp as number : (temp as number  * 9 / 5 + 32)) ),\r\n        feels: Math.round(system === systems.metric ? feels as number : (feels as number * 9 / 5 + 32)),\r\n        pressure: Math.round(system === systems.metric ? pressure as number * 0.750062 : pressure as number * 0.750062 / 25.4)\r\n    }\r\n}\r\n\r\n/** Unit system convertion and rounding */\r\nexport function alignWeatherForecast(forecast: Partial<weatherProps>[], system: systems): Partial<weatherProps>[] {\r\n    return forecast.map(day => {\r\n        const { tempMax, tempMin } = day;\r\n        return {\r\n            ...day,\r\n            tempMax: Math.round(system === systems.metric ? tempMax as number : (tempMax as number * 9 / 5 + 32)),\r\n            tempMin: Math.round(system === systems.metric ? tempMin as number : (tempMin as number * 9 / 5 + 32)),\r\n        }\r\n    })\r\n}\r\n\r\n/** List of the raw data are 3 hours time series for the next 5 days\r\n * [0] - it's now\r\n * also we need data for the rest of the day\r\n * and split others by the 8 series on day\r\n * days5Data output is array of [[today tail series], [8 series], [8 series], ...]\r\n  */\r\nfunction splitRawData(dataList: weatherRawChunk[]) {\r\n    const nowData = dataList.shift();\r\n\r\n    // taking rest of the day\r\n    let dayTailChunks = Math.floor((23 - new Date().getHours()) / 3);\r\n\r\n    const todayData = dayTailChunks === 0 ? [nowData] : dataList.splice(0, dayTailChunks);\r\n\r\n    const days5Data = [todayData];\r\n    for (let i = 0; i < 5; i++) {\r\n        days5Data.push(dataList.splice(0, 8));\r\n    }\r\n\r\n    return [nowData, days5Data];\r\n}\r\n\r\nfunction prepareForecast(days5Data: weatherRawChunk[][]) {\r\n    function calcMaxTemp(dayData: weatherRawChunk[]) {\r\n        return dayData.map(chunk => chunk.main.temp_max).reduce(\r\n            (max, temp) => { return max < temp ? temp : max }\r\n            , 0);\r\n    }\r\n\r\n    function calcMinTemp(dayData: weatherRawChunk[]) {\r\n        return dayData.map(chunk => chunk.main.temp_min).reduce(\r\n            (max, temp) => { return max > temp ? temp : max }\r\n            , 1000);\r\n    }\r\n\r\n    /** Looking for the worst weather in the forecast for this day */\r\n    function calcForecastIcon(dayData: weatherRawChunk[]) {\r\n        const icon = dayData.reduce(\r\n            (accum, current) => {\r\n                const currentIcon = current.weather[0].icon;\r\n                return Number(currentIcon.slice(0, 2)) > Number(accum.slice(0, 2)) ? currentIcon : accum;\r\n            }, '01d.png');\r\n\r\n        // changing night to day icon\r\n        return icon.replace(/n/, 'd');\r\n    }\r\n\r\n    const forecast = days5Data.map(dayData => (\r\n        {\r\n            tempMax: calcMaxTemp(dayData),\r\n            tempMin: calcMinTemp(dayData),\r\n            icon: calcForecastIcon(dayData)\r\n        }\r\n    ));\r\n\r\n    return forecast;\r\n}\r\n\r\nfunction prepareData(data: weatherRawChunk) {\r\n    return {\r\n        temp: data.main.temp,\r\n        feels: data.main.feels_like,\r\n        pressure: data.main.pressure,\r\n        humidity: data.main.humidity,\r\n        main: data.weather[0].main,\r\n        description: data.weather[0].description,\r\n        icon: data.weather[0].icon\r\n    }\r\n}\r\n\r\nexport function parseRawWeatherData(data: weatherRawT): weatherT {\r\n    if (!(data.list && data.list.length > 39)) throw new Error('Empty data list');\r\n\r\n    const [nowData, days5Data] = splitRawData(data.list);\r\n    \r\n    const city = data.city.name;\r\n    const forecast = prepareForecast(days5Data as weatherRawChunk[][]);\r\n    const now = prepareData(nowData as weatherRawChunk);\r\n\r\n    return { city, now, forecast };\r\n}","import { parseRawWeatherData } from '../common/utils'\r\nimport { weatherT, responseT } from '../common/types'\r\n\r\n/** Get and parse weather data */\r\nexport async function fetchParsedWeather(): Promise<weatherT> {\r\n\r\n    const res = await fetch('/api/weather');\r\n    const data = await res.json();\r\n    const weather = parseRawWeatherData(data);\r\n    return weather;\r\n}\r\n\r\ntype userDataT = {\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n    password: string,\r\n}\r\n\r\nexport async function postNewUser(userData: userDataT): Promise<responseT> {\r\n    const res = await fetch('/api/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(userData)\r\n    });\r\n\r\n    if (res.status === 500) throw new Error('Internal server error');\r\n\r\n    const response = await res.json();\r\n    return response;\r\n}\r\n\r\nexport async function postSignInInfo(userData: Partial<userDataT>) {\r\n    try {\r\n        const res = await fetch('/api/signin', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(userData)\r\n        });\r\n\r\n        return await res.json();\r\n    } catch {\r\n        throw new Error('Service is unavailable now');\r\n    }\r\n}\r\n\r\nexport async function getSignOut() {\r\n        const res = await fetch('/api/signout');\r\n        if (res.status !== 200) throw new Error('Internal server error');    \r\n}\r\n\r\nexport async function deleteAccountAPI() {\r\n    const res = await fetch('/api/deleteaccount');\r\n    if (res.status !== 200) throw new Error('Internal server error');\r\n}","import { Dispatch } from 'redux'\r\nimport { actionTypes } from './types'\r\nimport { weatherT, notificationT } from '../common/types'\r\nimport { userT } from '../store/types'\r\nimport { fetchParsedWeather, postSignInInfo, getSignOut, deleteAccountAPI } from '../middleware/api';\r\nimport { notificationTypes } from '../common/consts';\r\n\r\nconst types = actionTypes;\r\n\r\nexport function changeSystem() {\r\n    return {\r\n        type: types.changeSystem\r\n    }\r\n}\r\n\r\nexport function changePressure() {\r\n    return {\r\n        type: types.changePressure\r\n    }\r\n}\r\n\r\nexport function changeHumidity() {\r\n    return {\r\n        type: types.changeHumidity\r\n    }\r\n}\r\n\r\nexport function setServiceAvailable(availability: boolean) {\r\n    return {\r\n        type: types.setServiceAvailable,\r\n        serviceAvailable: availability\r\n    }\r\n}\r\n\r\nexport function gettingWeather() {\r\n    return {\r\n        type: types.gettingWeather\r\n    }\r\n}\r\n\r\nexport function gotWeather(weather: weatherT) {\r\n    return {\r\n        type: types.gotWeather,\r\n        weather: weather\r\n    }\r\n}\r\n\r\nexport function showNotification(notification: notificationT) {\r\n    return {\r\n        type: types.showNotification,\r\n        notification: {\r\n            type: notification.type,\r\n            msg: notification.msg,\r\n        }\r\n    }\r\n}\r\n\r\nexport function dropNotification() {\r\n    return {\r\n        type: types.dropNotification\r\n    }\r\n}\r\n\r\nexport function getWeather() {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(gettingWeather());\r\n        try {\r\n            const weather = await fetchParsedWeather()\r\n\r\n            dispatch(gotWeather(weather));\r\n            dispatch(gettingWeather());\r\n        } catch {\r\n            dispatch(gettingWeather());\r\n            dispatch(setServiceAvailable(false));\r\n        }\r\n    }\r\n}\r\n\r\nexport function setSignedIn(user: userT) {\r\n    return {\r\n        type: types.signIn,\r\n        user: {\r\n            email: user.email,\r\n            firstName: user.firstName\r\n        }\r\n    }\r\n}\r\n\r\ntype loginInfoT = {\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport function trySignIn(user: loginInfoT) {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            const res = await postSignInInfo(user);\r\n            if (res.code === 200) {\r\n                dispatch(setSignedIn(res.user));\r\n            } else dispatch(showNotification({\r\n                type: notificationTypes.error,\r\n                msg: res.msg\r\n            }));\r\n        } catch (err) {\r\n            dispatch(showNotification({\r\n                type: notificationTypes.error,\r\n                msg: err.message\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function setUnauthorized() {\r\n    return {\r\n        type: types.signOut\r\n    }\r\n}\r\n\r\nexport function signOut() {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            localStorage.clear();\r\n            await getSignOut();\r\n            dispatch(setUnauthorized());\r\n        } catch {\r\n            dispatch(showNotification({\r\n                type: notificationTypes.error,\r\n                msg: 'Service unavailable now'\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeTheme() {\r\n    return {\r\n        type: types.changeTheme\r\n    }\r\n}\r\n\r\nexport function deleteAccount() {\r\n    return async (dispatch: Dispatch<any>) => {\r\n        try {\r\n            await deleteAccountAPI();\r\n            dispatch(signOut());\r\n        } catch (err) {\r\n            dispatch(showNotification({\r\n                type: notificationTypes.error,\r\n                msg: err.message\r\n            }));\r\n        }\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport { Button, IconButton, TextField, Avatar, CircularProgress } from '@material-ui/core'\r\nimport { Container, Grid, Box, CssBaseline, Typography } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport { postNewUser } from '../middleware/api'\r\nimport { setSignedIn, showNotification } from '../actions'\r\nimport { notificationTypes } from '../common/consts'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nlet formData = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n}\r\nconst initialFormErrors = {\r\n    firstNameErr: false,\r\n    emailErr: false,\r\n    passwordErr: false\r\n}\r\n\r\nexport default function SignUp() {\r\n    const [formErrors, setFormErrors] = useState(initialFormErrors);\r\n    const [formOk, setFormOk] = useState(false);\r\n    const [spinnerShow, setSpinnerShow] = useState(false);\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    function areFieldsOk(data: typeof formData) {\r\n        const fErrs = { ...initialFormErrors };\r\n\r\n        fErrs.firstNameErr = data.firstName.length < 1 ? true : false;\r\n        fErrs.emailErr = !data.email.match(/.+@.+\\..+/);\r\n        fErrs.passwordErr = data.password.length < 6 ? true : false;\r\n        setFormErrors(fErrs);\r\n\r\n        const result = !Object.values(fErrs).includes(true);\r\n        return result;\r\n    }\r\n\r\n    const handleBack = () => history.push('/');\r\n\r\n    const handleChange = (prop: keyof typeof formData) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        formData[prop] = event.target.value;\r\n    }\r\n    const handleSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        const result = areFieldsOk(formData);\r\n        setFormOk(result);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!formOk) return;\r\n        (async () => {\r\n            setSpinnerShow(true);\r\n            try {\r\n                const res = await postNewUser(formData);\r\n                if (res.code === 201) {\r\n                    dispatch(setSignedIn({\r\n                        email: formData.email,\r\n                        firstName: formData.firstName\r\n                    }));\r\n                    history.replace('/');\r\n                } else throw new Error(res.msg);\r\n            } catch (err) {\r\n                setSpinnerShow(false);\r\n                dispatch(showNotification({\r\n                    type: notificationTypes.error,\r\n                    msg: err.message\r\n                }));\r\n                setFormOk(false);\r\n            }\r\n        })();\r\n    }, [formOk, dispatch, history]);\r\n\r\n    return (\r\n        <>\r\n            <Box mt={2}>\r\n                <IconButton onClick={handleBack}><ArrowBackIosIcon /></IconButton>\r\n            </Box>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign up\r\n                </Typography>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"fname\"\r\n                                    name=\"firstName\"\r\n                                    variant=\"outlined\"\r\n                                    error={formErrors.firstNameErr}\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"First Name\"\r\n                                    autoFocus\r\n                                    onChange={handleChange('firstName')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Last Name\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"lname\"\r\n                                    onChange={handleChange('lastName')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    error={formErrors.emailErr}\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    onChange={handleChange('email')}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    error={formErrors.passwordErr}\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    //autoComplete=\"current-password\"\r\n                                    onChange={handleChange('password')}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            {spinnerShow ? <CircularProgress color=\"secondary\" /> : 'Sign Up'}\r\n                        </Button>\r\n                        <Grid container justify=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to=\"/signin\">\r\n                                    <Typography variant=\"body2\">\r\n                                        Already have an account? Sign in\r\n                                    </Typography>\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport { Button, IconButton, TextField, Avatar, CircularProgress } from '@material-ui/core'\r\nimport { Container, Grid, Box, CssBaseline, Typography } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport { trySignIn } from '../actions'\r\nimport { rootStateT } from '../store/types'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nlet formData = {\r\n    email: '',\r\n    password: '',\r\n}\r\nconst initialFormErrors = {\r\n    emailErr: false,\r\n}\r\n\r\nexport default function SignIn() {\r\n    const [formErrors, setFormErrors] = useState(initialFormErrors);\r\n    const [spinnerShow, setSpinnerShow] = useState(false);\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const email = useSelector((state: rootStateT) => state.authentication.email);\r\n    const notification = useSelector((state: rootStateT) => Boolean(state.services.notification.msg))\r\n\r\n    if (email) history.replace('/');\r\n\r\n    function areFieldsOk(data: typeof formData) {\r\n        const fErrs = { ...initialFormErrors };\r\n\r\n        fErrs.emailErr = !data.email.match(/.+@.+\\..+/);\r\n        setFormErrors(fErrs);\r\n\r\n        const result = !Object.values(fErrs).includes(true);\r\n        return result;\r\n    }\r\n\r\n    const handleBack = () => history.replace('/');\r\n\r\n    const handleChange = (prop: keyof typeof formData) => (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        formData[prop] = event.target.value;\r\n    }\r\n    const handleSubmit = (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        const result = areFieldsOk(formData);\r\n\r\n        if (result) {\r\n            setSpinnerShow(true);\r\n            dispatch(trySignIn({\r\n                email: formData.email,\r\n                password: formData.password\r\n            }));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (notification) setSpinnerShow(false);\r\n    }, [notification]);\r\n\r\n    return (\r\n        <>\r\n            <Box mt={2}>\r\n                <IconButton onClick={handleBack}><ArrowBackIosIcon /></IconButton>\r\n            </Box>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    <Avatar className={classes.avatar}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign in\r\n                    </Typography>\r\n                    <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email Address\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            error={formErrors.emailErr}\r\n                            onChange={handleChange('email')}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            onChange={handleChange('password')}\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                        >\r\n                            {spinnerShow ? <CircularProgress color=\"secondary\" /> : 'Sign In'}\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Link to=\"/signup\">\r\n                                    <Typography variant=\"body2\">\r\n                                        {\"Don't have an account? Sign Up\"}\r\n                                    </Typography>\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport TuneIcon from '@material-ui/icons/Tune'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport { DrawerCPropsT } from './types'\r\nimport { signOut } from '../../actions'\r\n\r\nconst useStyles = makeStyles({\r\n    list: {\r\n        width: 200,\r\n    }\r\n});\r\n\r\nexport default (props: DrawerCPropsT) => {\r\n    const isOpen = props.isOpen;\r\n    const toggleOpen = props.toggleOpen;\r\n    const userName = props.userName;\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const handleOptions = () => {\r\n        history.push('/options')\r\n    }\r\n\r\n    const handleDrawer = (event: React.KeyboardEvent | React.MouseEvent) => {\r\n        if (event.type === 'keydown' &&\r\n            ((event as React.KeyboardEvent).key === 'Tab' ||\r\n                (event as React.KeyboardEvent).key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        toggleOpen(false);\r\n    }\r\n\r\n    const handleSignOut = () => {\r\n        dispatch(signOut());\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Drawer anchor='left' open={isOpen} onClick={handleDrawer} onKeyDown={handleDrawer}> {/* onClose={toggleDrawer(anchor, false)} */}\r\n            <div className={classes.list}>\r\n                <List>\r\n                    <ListItem>\r\n                        <ListItemText primary={userName} />\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem button onClick={handleOptions}>\r\n                        <ListItemIcon><TuneIcon /></ListItemIcon>\r\n                        <ListItemText primary='Options' />\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List>\r\n                    <ListItem button onClick={handleSignOut}>\r\n                        <ListItemIcon><ExitToAppIcon /></ListItemIcon>\r\n                        <ListItemText primary='Sign out' onClick={handleSignOut} />\r\n                    </ListItem>\r\n                </List>\r\n            </div>\r\n        </Drawer>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Typography, Hidden, Box } from '@material-ui/core';\r\nimport { AppBar, Toolbar, IconButton, Tooltip } from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport DrawerC from './DrawerC';\r\nimport { rootStateT } from '../../store/types';\r\nimport { signOut } from '../../actions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  }\r\n}));\r\n\r\nexport default () => {\r\n  const classes = useStyles();\r\n  const firstName = useSelector((state: rootStateT) => state.authentication.firstName);\r\n  const dispatch = useDispatch();\r\n\r\n  const [isOpenMenu, setMenu] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const handleOptions = () => history.push('/options');\r\n  const handleMenu = () => setMenu(state => !state);\r\n  \r\n  const handleSignOut = () => {\r\n    dispatch(signOut());\r\n    history.push('/');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Hidden smUp>\r\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={handleMenu}>\r\n              <MenuIcon />\r\n            </IconButton>\r\n          </Hidden>\r\n          <Hidden smDown>\r\n            <Typography variant=\"h6\">\r\n              Your weather today{firstName ? `, ${firstName}!` : null}\r\n            </Typography>\r\n          </Hidden>\r\n          <div className={classes.grow}></div>\r\n          <Hidden smDown>\r\n            <Box mx={1}>\r\n              <Tooltip title=\"Settings\">\r\n                <IconButton onClick={handleOptions} color=\"inherit\">\r\n                  <TuneIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n            <Box mx={1}>\r\n              {\r\n                firstName ?\r\n                  <Tooltip title=\"Sign out\">\r\n                    <IconButton color=\"inherit\" onClick={handleSignOut}><ExitToAppIcon /></IconButton>\r\n                  </Tooltip>\r\n                  : null\r\n              }\r\n            </Box>\r\n          </Hidden>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <DrawerC isOpen={isOpenMenu} toggleOpen={setMenu} userName={firstName} />\r\n    </>\r\n  )\r\n};","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Grid, makeStyles, createStyles, Theme } from '@material-ui/core'\r\nimport { Paper } from '@material-ui/core'\r\nimport { rootStateT } from '../store/types'\r\nimport { weatherProps } from '../common/types'\r\nimport { alignWeatherForecast } from '../common/utils'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    grid: {\r\n        textAlign: 'center'\r\n    },\r\n    img: {\r\n        width: '50px'\r\n    }\r\n}));\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n\r\n    const forecast = useSelector((state: rootStateT) => state.weather.forecast as Partial<weatherProps>[]);\r\n    const system = useSelector((state: rootStateT) => state.options.system);\r\n\r\n    const weatherForecast = alignWeatherForecast(forecast, system).map((day, i) => {\r\n        const today = new Date();\r\n        const date = new Date(today.setDate(today.getDate() + i)).toLocaleString([], {\r\n            weekday: 'short',\r\n            day: 'numeric'\r\n        });\r\n\r\n        return (\r\n            <Grid key={i} item className={classes.grid}>\r\n                <Grid item>\r\n                    {date}\r\n                </Grid>\r\n                <Grid item>\r\n                    <Paper elevation={2}>\r\n                        {day.icon ?\r\n                            <img className={classes.img}\r\n                                src={`http://openweathermap.org/img/wn/${day.icon}@2x.png`}\r\n                                alt=\"Weather forecast\" />\r\n                            : null}\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item>\r\n                    {day.tempMax}°\r\n                </Grid>\r\n                <Grid>\r\n                    {day.tempMin}°\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    });\r\n\r\n    // leaving clear 5 days\r\n    weatherForecast.pop();\r\n\r\n    return (\r\n        <Grid container justify=\"center\" spacing={1}>\r\n            {weatherForecast}\r\n        </Grid>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Box, Grid, Typography } from '@material-ui/core'\r\nimport { Paper } from '@material-ui/core'\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { rootStateT } from '../store/types'\r\nimport WeatherForecast from './WeatherForecast'\r\nimport { systems } from '../common/consts'\r\nimport { getWeather, setServiceAvailable } from '../actions';\r\nimport { alignWeatherNow } from '../common/utils'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    grid: {\r\n        padding: theme.spacing(1),\r\n        textAlign: 'center'\r\n    },\r\n    img: {\r\n        width: '150px'\r\n    }\r\n}))\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const firstName = useSelector((state: rootStateT) => state.authentication.firstName);\r\n    const system = useSelector((state: rootStateT) => state.options.system);\r\n    const pressure = useSelector((state: rootStateT) => state.options.pressure);\r\n    const humidity = useSelector((state: rootStateT) => state.options.humidity);\r\n    const serviceAvailable = useSelector((state: rootStateT) => state.services.serviceAvailable);\r\n\r\n    const weatherState = useSelector((state: rootStateT) => state.weather);\r\n\r\n    const city = weatherState.city;\r\n\r\n    // unit system changes and rounding values\r\n    const weather = alignWeatherNow(weatherState.now, system);\r\n\r\n    useEffect(() => {\r\n        if (!city) dispatch(getWeather());\r\n        if (!serviceAvailable && city) dispatch(setServiceAvailable(true));\r\n    }, [city]);\r\n\r\n    return (\r\n        <>\r\n            {city ?\r\n                <Box my={3}>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h6\">{city}</Typography></Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h3\">\r\n                                {weather.temp}°{system === systems.metric ? ' C' : ' F'}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"subtitle2\">Feels {weather.feels}°</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Paper elevation={2}>\r\n                                {weather.icon ?\r\n                                    <img\r\n                                        className={classes.img}\r\n                                        src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\r\n                                        alt=\"Weather\" />\r\n                                    : null\r\n                                }\r\n                            </Paper>\r\n                        </Grid>\r\n                        <Grid item container direction=\"row\" justify=\"center\" spacing={3} className={classes.grid}>\r\n                            {pressure ?\r\n                                <Grid item>\r\n                                    <Typography variant=\"subtitle2\">\r\n                                        <Grid item>Pressure</Grid>\r\n                                        <Grid item >{weather.pressure} {system === systems.metric ? 'mm' : 'in'}Hg</Grid>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                : null\r\n                            }\r\n                            {humidity ?\r\n                                <Grid item>\r\n                                    <Typography variant=\"subtitle2\">\r\n                                        <Grid item>Humidity</Grid>\r\n                                        <Grid item>{weather.humidity} %</Grid>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                : null\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                : null}\r\n            {firstName && city ? <WeatherForecast /> : null}\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Box from '@material-ui/core/Box'\r\nimport { FormControl, FormGroup, FormControlLabel, Switch, Button, IconButton, Divider } from '@material-ui/core'\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { rootStateT } from '../store/types'\r\nimport { changeSystem, changePressure, changeHumidity, changeTheme, deleteAccount } from '../actions'\r\nimport { systems, themes } from '../common/consts'\r\n\r\nexport default () => {\r\n    const { system, pressure, humidity, theme } = useSelector((state: rootStateT) => state.options);\r\n    const auth = useSelector((state: rootStateT) => state.authentication.firstName);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const systemChecked = system === systems.metric ? true : false;\r\n    const systemLabel = system === systems.metric ? 'Metric system' : 'Imperial system';\r\n    const themeSwitch = theme === themes.light ? false : true;\r\n    const themeLabel = theme === themes.light ? 'Light theme' : 'Dark theme';\r\n\r\n    const handleBack = () => history.push('/');\r\n    const handleSystem = () => dispatch(changeSystem());\r\n    const handlePressure = () => dispatch(changePressure());\r\n    const handleHumidity = () => dispatch(changeHumidity());\r\n    const handleTheme = () => dispatch(changeTheme());\r\n    const handleDeleteAccount = () => dispatch(deleteAccount());\r\n\r\n    return (\r\n        <>\r\n            <Box mt={2}>\r\n                <IconButton onClick={handleBack}><ArrowBackIosIcon /></IconButton>\r\n            </Box>\r\n            <Box px={5}>\r\n                <Box display=\"flex\" my={2}>\r\n                    <Box fontSize=\"h6.fontSize\">\r\n                        Options:\r\n                    </Box>\r\n                </Box>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={<Switch checked={systemChecked} onChange={handleSystem} name=\"system\" />}\r\n                            label={systemLabel}\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Switch checked={pressure} onChange={handlePressure} name=\"pressure\" />}\r\n                            label=\"Pressure\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Switch checked={humidity} onChange={handleHumidity} name=\"humidity\" />}\r\n                            label=\"Humidity\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Switch checked={themeSwitch} onChange={handleTheme} name=\"theme\" />}\r\n                            label={themeLabel}\r\n                        />\r\n                        {auth ?\r\n                            <>\r\n                                <Box my={2} ><Divider /></Box>\r\n                                <Button\r\n                                    color=\"secondary\"\r\n                                    startIcon={<DeleteIcon />}\r\n                                    onClick={handleDeleteAccount}\r\n                                >\r\n                                    Delete account\r\n                                </Button>\r\n                            </>\r\n                            : null}\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Box>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Snackbar } from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert'\r\nimport { rootStateT } from '../store/types'\r\nimport { dropNotification } from '../actions'\r\n\r\nexport default () => {\r\n    const dispatch = useDispatch();\r\n    const notification = useSelector((state: rootStateT) => state.services.notification);\r\n\r\n    const handleAlertClose = () => {\r\n        dispatch(dropNotification());\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={Boolean(notification.msg)} autoHideDuration={6000} onClose={handleAlertClose}>\r\n            <MuiAlert severity={notification.type} elevation={6} variant=\"filled\" onClose={handleAlertClose}>\r\n                {notification.msg}\r\n            </MuiAlert>\r\n        </Snackbar>\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport SignInUp from '../SignInUp';\nimport SignUp from '../SignUp';\nimport SignIn from '../SignIn';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Container, CssBaseline, Backdrop, CircularProgress } from '@material-ui/core';\nimport MenuSection from '../MenuSection';\nimport Weather from '../Weather';\nimport Options from '../Options';\nimport Notification from '../Notification'\nimport { rootStateT } from '../../store/types'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: '#fff',\n      fontSize: '2rem'\n    }\n  })\n);\n\nfunction App() {\n  const themeState = useSelector((state: rootStateT) => state.options.theme);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: themeState,\n      background: {\n        paper: '#80d8ff'\n      },\n      primary: {\n        main: '#80d8ff'\n      },\n      secondary: {\n        main: '#00b0ff'\n      }\n    }\n  });\n\n  const serviceUnavailableOpen = !useSelector((state: rootStateT) => state.services.serviceAvailable);\n  const gettingWeatherOpen = useSelector((state: rootStateT) => state.services.gettingWeather);\n  const state = useSelector((state: rootStateT) => state);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    localStorage.setItem('state', JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <>\n      <Router>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <MenuSection />\n          <Container>\n            <Switch>\n              <Route path=\"/options\" component={Options} />\n              <Route path=\"/signin\" component={SignIn} />\n              <Route path=\"/signup\" component={SignUp} />\n              <Route path=\"/\">\n                <Weather />\n                <SignInUp />\n                <Backdrop className={classes.backdrop} open={gettingWeatherOpen} >\n                  <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <Backdrop className={classes.backdrop} open={serviceUnavailableOpen} >\n                  Sorry, service is unavailable now\n              </Backdrop>\n              </Route>\n            </Switch>\n            <Notification />\n          </Container>\n        </ThemeProvider>\n      </Router>\n    </>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { systems, themes, initialState } from '../common/consts'\r\nimport { actionTypes, actionsT } from '../actions/types'\r\n\r\nconst types = actionTypes;\r\n\r\nexport default function options(state = initialState.options, action: actionsT) {\r\n    switch (action.type) {\r\n        case types.changeSystem:\r\n            const system = state.system === systems.metric ? systems.imperial : systems.metric;\r\n            return {...state, system: system};\r\n        case types.changePressure:\r\n            return {...state, pressure: !state.pressure};\r\n        case types.changeHumidity:\r\n            return {...state, humidity: !state.humidity};\r\n        case types.changeTheme:\r\n            const theme = state.theme === themes.light ? themes.dark : themes.light;\r\n            return { ...state, theme: theme }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport options from './options'\r\nimport authentication from './authentication'\r\nimport weather from './weather'\r\nimport { services } from './services'\r\n\r\nconst rootReducer = combineReducers({\r\n    authentication,\r\n    options,\r\n    services,\r\n    weather,\r\n})\r\n\r\nexport default rootReducer","import { initialState } from '../common/consts';\r\nimport { actionTypes, actionsT } from '../actions/types'\r\n\r\nexport default function authentication(state = initialState.authentication, action: actionsT) {\r\n    switch (action.type) {\r\n        case actionTypes.signIn:\r\n            return action.user;\r\n        case actionTypes.signOut:\r\n            return initialState.authentication;\r\n        default:\r\n            return state;\r\n    }\r\n}","import { initialState } from '../common/consts';\r\nimport { actionTypes, actionsT } from '../actions/types'\r\nimport { initialNotification } from '../common/consts'\r\n\r\nexport function services(state = initialState.services, action: actionsT) {\r\n    switch (action.type) {\r\n        case actionTypes.setServiceAvailable:\r\n            return { ...state, serviceAvailable: action.serviceAvailable };\r\n        case actionTypes.gettingWeather:\r\n            return { ...state, gettingWeather: !state.gettingWeather };\r\n        case actionTypes.showNotification:\r\n            return { ...state, notification: {\r\n                type: action.notification.type,\r\n                msg: action.notification.msg\r\n            }};\r\n        case actionTypes.dropNotification:\r\n            return { ...state, notification: initialNotification };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { initialState } from '../common/consts'\r\nimport { actionTypes, actionsT } from '../actions/types'\r\n\r\nexport default function weather(state = initialState.weather, action: actionsT) {\r\n    if (action.type === actionTypes.gotWeather) {\r\n            return action.weather\r\n    }\r\n    \r\n    return state;\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\nimport { initialState } from '../common/consts';\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    const { logger } = require('redux-logger');\r\n    middlewares.push(logger);\r\n}\r\n\r\nconst state = localStorage.getItem('state');\r\n\r\nconst storedState = state ? JSON.parse(state) : initialState;\r\n\r\nexport default () => {\r\n    return createStore(rootReducer, storedState, applyMiddleware(...middlewares))\r\n}","import React from 'react'\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}